
[gcode_macro SAFE_HOME_Z_WITH_PROBE]
gcode:
    {% set MIN_Z = params.MIN_Z|default("")|string %}
    SET_KINEMATIC_POSITION Z=0
    G1 Z5
    Query_Probe
    SS_CONDITIONAL_TAKE_PROBE
    G1 X40 Y110
    G28.1 Z
    G91
    G1 Z{MIN_Z}
#END OF SAFE_HOME_Z_WITH_PROBE

[gcode_macro SAFE_HOME_Z]
gcode:
    {% set MIN_Z = params.MIN_Z|default("")|string %}
    {% if printer.probe %}
        SAFE_HOME_Z_WITH_PROBE MIN_Z={MIN_Z}
    {% else %}
        G28.1 Z
        G1 Z{MIN_Z}
    {% endif %}
#END OF SAFE_HOME_Z

[gcode_macro SAFE_HOME_X]
gcode:
    {% set MIN_X = params.MIN_X|default("")|string %}
    G28.1 X
    G1 X{MIN_X} F5000
#END OF SAFE_HOME_X

[gcode_macro SAFE_HOME_Y]
gcode:
    {% set MIN_Y = params.MIN_Y|default("")|string %}
    G28.1 Y
    G1 Y{MIN_Y} F5000
#END OF SAFE_HOME_Y

[gcode_macro G28]
rename_existing: G28.1 #Move the original G28 to G28.1
gcode:
    G90  #set to absolute XYZ mode.
    {% set min_safe_x = 115 %} #Define the minimum X value needed to safely do a Y home move, without crashing probe into gantry. This also provides the 'retact distance', so the toolhead doesn't keep pressing on the endstop.
    {% set min_safe_y = 115 %} #Define the minimum Y value needed to safely move print head off the endstop.  This also provides some 'retact distance', so the toolhead doesn't keep pressing on the endstop.

#For debugging purposes only (comment this section out after use): show current position, show XY mins, show final intended positions (based on min_safe x and y).
#NOTE: To use M118, Printer.cfg must include:
#   [respond]
#   default_type: echo
    #M118 Current Toolhead Position x:{printer.toolhead.position.x} y:{printer.toolhead.position.y}
    #M118 X axis min: {printer.toolhead.axis_minimum.x}, Y axis min: {printer.toolhead.axis_minimum.y}
    #M118 Resting Toolhead Position x:{min_safe_x} y:{min_safe_y}
#Debug code end

    {% if params.X is defined and params.Y is undefined and params.Z is undefined %} #Home X and move to safe location (min_safe_x mm) away from endstop.
        SAFE_HOME_X MIN_X={min_safe_x}
    {% endif %}

    {% if params.X is undefined and params.Y is defined and params.Z is undefined %} #Home Y and move to safe location (min_safe_y mm) away from endstop.
        
        {% if (printer.toolhead.homed_axes|truncate(1, False, '', 0)) != "x" or printer.toolhead.position.x < min_safe_x %} #If X isn't homed OR if X is within the safe_distance,  Home X before doing the Home Y.
            SAFE_HOME_X MIN_X={min_safe_x}
	    {% endif %}
        SAFE_HOME_Y MIN_Y={min_safe_y}
    {% endif %}

    {% if params.X is defined and params.Y is defined and params.Z is undefined %} #Home X and Y (in that order), moving each to their safe locations.
        SAFE_HOME_X MIN_X={min_safe_x}
        SAFE_HOME_Y MIN_Y={min_safe_y}
    {% endif %}

    {% if params.X is undefined and params.Y is undefined and params.Z is defined %} #Home Z - Klipper won't allow this to run if XY aren't homed, so I've not added any of my own protection code here.
        SAFE_HOME_Z MIN_Z=15
    {% endif %}

    {% if (params.X is defined and params.Y is defined and params.Z is defined) or (params.X is undefined and params.Y is undefined and params.Z is undefined)  %} #Home all axes (in order XYZ) if either G28 (no axes specified) or G28 XYZ (all axes specified) is called.
        SAFE_HOME_X MIN_X={min_safe_x}
        SAFE_HOME_Y MIN_Y={min_safe_y}
        SAFE_HOME_Z MIN_Z=15
    {% endif %}
    G90 #ensure absolute XYZ mode on completion.
##